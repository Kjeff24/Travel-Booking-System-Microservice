spring:
  application:
    name: gateway
  # Below property is equivalent to @EnableEurekaClient. It helps API Gateway to register itself to eureka server
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
      routes[0]:
        id: booking-service
        uri: lb://booking-service
        predicates[0]: Path=/api/booking-service/**
      routes[1]:
        id: category-service
        uri: lb://category-service
        predicates[0]: Path=/api/category-service/**
      # Enable token relay - Pass the successful authenticated token from keycloak server to downstream APIs
      default-filters: TokenRelay
    # Below property tells API Gateway to work in a load balanced mode
    loadbalancer:
      enabled: true

  # Configuration for connecting to spring server
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: http://localhost:8080/oauth2/jwks
      client:
        provider:
          spring:
            issuer-uri: http://localhost:8080
        registration:
          gateway-client:
            provider: spring
            client-id: gateway-client
            client-secret: secret
            authorization-grant-type: authorization_code
            #            client-authentication-method: client_secret_basic
            scope: openid, profile
            redirect-uri: http://127.0.0.1:8765/login/oauth2/code/gateway-client
server:
  port: 8765
# Generate a unique name for the instance
eureka:
  instance:
    hostname: localhost
    instance-id: ${spring.application.name}:${random.uuid}
