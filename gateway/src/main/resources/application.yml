#spring:
#  application:
#    name: gateway
# Below property is equivalent to @EnableEurekaClient. It helps API Gateway to register itself to eureka server
#  config:
#    import: optional:configserver:http://localhost:8888

spring:
  config:
    import: optional:configserver:http://localhost:8888
  application:
    name: gateway
  # Below property is equivalent to @EnableEurekaClient. It helps API Gateway to register itself to eureka server
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
#          lower-case-service-id: true
      routes[0]:
        id: booking-service
        uri: lb://booking-service
        predicates[0]: Path=/api/bookings/**
        predicates[1]: Path=/api/categories/**
      # Enable token relay - Pass the successful authenticated token from keycloak server to downstream APIs
#      default-filters: TokenRelay
    # Below property tells API Gateway to work in a load balanced mode
    loadbalancer:
      enabled: true

  # Configuration for connecting to spring server
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: http://localhost:8080/oauth2/jwks
#      client:
#        provider:
#          spring:
#            issuer-uri: http://localhost:8080
#        registration:
#          client2:
#            provider: spring
#            client-id: client2
#            client-secret: secret
#            authorization-grant-type: authorization_code
#            client-authentication-method: client_secret_basic
#            scope: openid
#            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
server:
  port: 8765
# Generate a unique name for the instance
eureka:
  instance:
    hostname: localhost
    instance-id: ${spring.application.name}:${random.uuid}
